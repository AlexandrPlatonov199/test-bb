import re
from typing import List


def is_valid_key(key: str, valid_keys: List[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á –¥–æ–ø—É—Å—Ç–∏–º—ã–º.
    """
    return key in valid_keys


def verify_text(test_text: str, valid_keys: List[str]) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π –∏ —Å–∫–æ–±–æ–∫.

    Args:
    test_text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    valid_keys (list): –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–µ–π.

    Returns:
    str: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫
    if test_text.count('{') != test_text.count('}'):
        return "–û—à–∏–±–∫–∞: –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    pattern = re.compile(r'\{([^}]+)\}')
    for match in pattern.findall(test_text):
        if not is_valid_key(match, valid_keys):
            return f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á '{match}'"

    return "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"


if __name__ == "__main__":
    valid_keys = ['name', 'day_month', 'day_of_week', 'start_time', 'end_time', 'master', 'services']

    # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    test_text_1 = """
    {name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
    ‚åöÔ∏è {day_month} –≤ {start_time}
    üë© {master}
    –£—Å–ª—É–≥–∏:
    {services}
    """
    result_1 = verify_text(test_text_1, valid_keys)
    assert result_1 == "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", f"Failed Test 1: {result_1}"

    # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á
    test_text_2 = """
    {name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
    ‚åöÔ∏è {day_month} –≤ {start_time}
    üë© {master}
    –£—Å–ª—É–≥–∏:
    {services}
    —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é {record_link}
    """
    result_2 = verify_text(test_text_2, valid_keys)
    assert result_2 == "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á 'record_link'", f"Failed Test 2: {result_2}"

    # –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)
    test_text_3 = """
    {Name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
    ‚åöÔ∏è {day_month} –≤ {start_time}
    üë© {master}
    –£—Å–ª—É–≥–∏:
    {services}
    """
    result_3 = verify_text(test_text_3, valid_keys)
    assert result_3 == "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á 'Name'", f"Failed Test 3: {result_3}"

    # –¢–µ—Å—Ç 4: –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–æ–±–æ–∫
    test_text_4 = """
    {name, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
    ‚åöÔ∏è {day_month} –≤ {start_time}
    üë© {master}
    –£—Å–ª—É–≥–∏:
    {services}
    """
    result_4 = verify_text(test_text_4, valid_keys)
    assert result_4 == "–û—à–∏–±–∫–∞: –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫", f"Failed Test 4: {result_4}"

    # –¢–µ—Å—Ç 5: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á
    test_text_5 = """
    {nme}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞:
    ‚åöÔ∏è {day_month} –≤ {start_time}
    üë© {master}
    –£—Å–ª—É–≥–∏:
    {services}
    """
    result_5 = verify_text(test_text_5, valid_keys)
    assert result_5 == "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á 'nme'", f"Failed Test 5: {result_5}"

    print("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
